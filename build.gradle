import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

plugins {
  id 'java'
  id 'idea'
}

group 'org.logstash.plugins.filter.embeddings_generator'
version "${new File("VERSION").text.trim()}"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'ai.djl:api:0.31.0'
    implementation 'ai.djl.huggingface:tokenizers:0.31.0'
    implementation 'ai.djl.pytorch:pytorch-engine:0.31.0'
    implementation 'ai.djl.pytorch:pytorch-model-zoo:0.31.0'

    // DJL internally utilizes Gson
    implementation 'com.google.code.gson:gson:2.11.0'

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.17.0'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task run (type: JavaExec, dependsOn: classes) {
    if (project.hasProperty('providedargs')) {
        args(providedargs.split(','))
    }
    classpath = sourceSets.main.runtimeClasspath
}

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-filter-embeddings_generator_jars.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtimeClasspath.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
            w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
         configurations.runtimeClasspath.allDependencies.each { dep ->
            File f = configurations.runtimeClasspath.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

task localGem(dependsOn: vendor) {
    doLast {
        exec {
            commandLine "gem", "build", "logstash-filter-embeddings_generator.gemspec"
        }
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)